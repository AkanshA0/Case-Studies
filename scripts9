1
#!/bin/bash

#Querying user's command history

read -p "Enter the command to check which users have used: " com
if [ $whoami == "root" ]
then
grep -n $com /home/*/.bash_history

else
echo "You do not have permission, Run as root!!"
fi


2
#!/bin/bash

#Bulk search and replace

read -p "Enter the path of file or directory : " loc
read -p "Enter the string to be searched : " search
read -p "Enter the string with which to replace : " rep

if [ -d $loc ]
then
sed -i 's/'"$search"'/'"$rep"'/g' $loc/*

elif [ -f $loc ]
then
sed -i 's/'"$search"'/'"$rep"'/g' $loc
fi



3
#!/bin/bash

#alphanumeric validator

read -p "Enter a string : " str

if [ "$( echo $str | sed 's/[^[:alnum:]]'//g )" == $str ]
then
echo "the string is alphanumeric"
else
echo "string is not alphanumeric"
fi



4
#!/bin/bash

#File search manager

if [ "$#" != "1" ]
then
echo "Usage: $0 <path_of_directory>
find files in  <path_of_directory> "
exit 1
fi

dir=$1
if [ ! -d $dir ]
then
echo "Invalid directory name!"
else
read -p "Enter name of file : " nm
read -p "Enter size : " sz
read -p "Enter timestamp(yyyy-mm-dd) : " tm
read -p "Enter permission : " pm
read -p "Enter owner name : " owner

echo "files are - "
find $dir/ -name "$nm"  -user "$owner" -perm "$pm" -size "$sz" -newerat "$tm"
fi



5
#!/bin/bash

#Timezone

dir="/usr/share/zoneinfo/"

if [ ! -d "$dir" ]
then
echo "directory doesn't exist!"
exit 1
else

if [ "$#" == 0 ]
then
TZ=UTC date
else
if [ "$1" == "list" ]
then
timedatectl list-timezones
else
TZ=$1 date
fi
fi
fi



6
#!/bin/bash

#Fetch Latest/Oldest Files

max=10
x=1
if [ ! $# ]
then
dir="./"
else
dir=$1
fi

while [ 1 ]
do

case $x in
        1) read -p "Enter limit of number of files to display : " max
        ;;

        2) echo -e "\e[1;31mList of all files in $dir - \e[0m"
        du -a $dir | head -n $max
        ;;
        3) echo -e "\e[1;31mHidden files - \e[0m"
        ls -a $dir | head -n $max
        ;;
        4) echo -e "\e[1;31mOldest modified files - \e[0m"
        find ../ -type f -printf '%T+ %p\n' | sort | head -n $max
        ;;

        *)
        break
        ;;
esac

x=$(($x+1))

done


7
#!/bin/bash

# file tuncator

if [ "$#" != "2" ]
then
echo "Usage: $0 <path> <size>
Truncate the <path> to exactly <size> bytes."
exit 1
fi
file=$1
size="$2"
dd bs=1 seek=$size if=/dev/null of="$file"
exit 0


8
#!/bin/bash

#colorful diference viewer

if [ "$#" -ne "2" ]; then
    echo "ERROR: Two files/directories must be passed as arguments" >&2; exit 1;
fi
removed=$(echo -en '\033[31m')
added=$(echo -en '\033[32m')
changed=$(echo -en '\033[34m')
file=$(echo -en '\033[47m')
reset=$(echo -en '\033[0m')
diff -u "$@" | sed "
s/^\*\{3\}.*\*\{4\}/$changed&$reset/;t
  s/^-\{3\}.*-\{4\}/$changed&$reset/;t
             s/^@.*/$changed&$reset/;t
         s/^[0-9].*/$changed&$reset/;t
             s/^!.*/$changed&$reset/;t
             s/^-.*/$removed&$reset/;t
             s/^<.*/$removed&$reset/;t
            s/^\*.*/$added&$reset/;t
            s/^\+.*/$added&$reset/;t
             s/^>.*/$added&$reset/;t
       s/^Only in.*/$file&$reset/;t
       s/^Index: .*/$file&$reset/;t
         s/^diff .*/$file&$reset/;t
"
exit 0



9
#!/bin/bash

#Text Transform

first_letter_uppercase() {
    echo $1 | awk '{print toupper(substr($0,0,1))tolower(substr($0,2))}'
}
everything_uppercase() {
    echo $1 | awk '{print toupper($0)}'
}
everything_lowercase() {
    echo $1 | awk '{print tolower($0)}'
}
if [ -z "$1" ]; then
    echo "ERROR: Input text is not supplied in the arguments" >&2; exit 1;
fi
input=$1
echo "First Letter Capital: $(first_letter_uppercase "$input")
Uppercase: $(everything_uppercase "$input")
Lowercase: $(everything_lowercase "$input")
"
